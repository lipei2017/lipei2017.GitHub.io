{"componentChunkName":"component---src-templates-blog-post-js","path":"/GoF/","result":{"data":{"markdownRemark":{"html":"<h2>单例模式</h2>\n<p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<blockquote>\n<p>惰性单例模式：在合适的时候才创建对象，并且只创建唯一的一个。</p>\n</blockquote>\n<p>通用惰性单例</p>\n<pre><code class=\"language-js\">var getSingle = function (fn) {\n  var result;\n  return function () {\n    return result || (result = fn.apply(this, arguments));\n  };\n};\n</code></pre>\n<h2>策略模式</h2>\n<p>定义一系列的算法，把它们一个个封装起来，并且使用他们可以互相替换</p>","frontmatter":{"title":"设计模式"}}},"pageContext":{"slug":"/GoF/"}},"staticQueryHashes":["3159585216"]}