{"componentChunkName":"component---src-templates-blog-post-js","path":"/git-flow/","result":{"data":{"markdownRemark":{"html":"<h3>领域</h3>\n<ul>\n<li>metadata: 主数据</li>\n<li>wms: 仓储</li>\n<li>mes: 生产</li>\n<li>eam: 设备</li>\n<li>qms: 质量</li>\n</ul>\n<h3>分支命名规范</h3>\n<ul>\n<li>feature/<a href=\"#%E9%A2%86%E5%9F%9F\">领域</a>/功能/20220525</li>\n<li>feature/功能/20220525</li>\n<li>release/<a href=\"#%E9%A2%86%E5%9F%9F\">领域</a>/20220525</li>\n<li>release/20220525</li>\n<li>hotfix/<a href=\"#%E9%A2%86%E5%9F%9F\">领域</a>/20220525</li>\n<li>hotfix/20220525</li>\n</ul>\n<blockquote>\n<p>Tip: <br></p>\n<ul>\n<li>如果是一个整包，可以忽略[领域];<br></li>\n<li>如果是订制包，发布到对应的项目目录下比如：<font color=red><strong>jinji</strong></font>/release/领域/20220525</li>\n<li>建议用'/'分隔，有些 git 插件可以将这种形式的路径转换成文件目录形式，便于管理</li>\n</ul>\n</blockquote>\n<h3>开发流程</h3>\n<h4>接到新需求</h4>\n<ol>\n<li>获取最新的稳定版本的主分支，如：main</li>\n</ol>\n<pre><code>git fetch origin main\n</code></pre>\n<ol start=\"2\">\n<li>新建基于 main 的开发分支，如：feature/wms/stockTransfer/20220525，并且切换到该分支</li>\n</ol>\n<pre><code>git checkout -b feature/wms/stockTransfer/20220525 origin/main\n</code></pre>\n<h4>需求开发完毕</h4>\n<ol>\n<li>获取最新的提测分支，如：release/wms/20200530（提测分支基于最新的稳定版本 main 迁出）</li>\n</ol>\n<pre><code>(feature/wms/stockTransfer/20220525)\ngit fetch orgin release/wms/20200530\n</code></pre>\n<ol start=\"2\">\n<li>将当前开发分支基于提测分支做 rebase</li>\n</ol>\n<pre><code>(feature/wms/stockTransfer/20220525)\ngit rebase origin/release/wms/20200530\n</code></pre>\n<ol start=\"3\">\n<li>迁出提测分支，并切换到该分支，将开发分支合并到提测分支</li>\n</ol>\n<pre><code>(feature/wms/stockTransfer/20220525)\ngit checkout -b release/wms/20200530 origin/release/wms/20200530\n(release/wms/20200530)\ngit merge feature/wms/stockTransfer/20220525\n</code></pre>\n<ol start=\"4\">\n<li>推送提测分支到远程仓库</li>\n</ol>\n<pre><code>(release/wms/20200530)\ngit push origin release/wms/20200530\n</code></pre>\n<h4>测试过程中修复 bug</h4>\n<ol>\n<li>修复完毕，获取提测分支并做 rebase</li>\n</ol>\n<pre><code>(release/wms/20200530)\ngit pull --rebase origin release/wms/20200530\n</code></pre>\n<ol start=\"2\">\n<li>推送到远程测试分支</li>\n</ol>\n<pre><code>(release/wms/20200530)\ngit push origin release/wms/20200530\n</code></pre>\n<h4>测试完毕</h4>\n<ol>\n<li>获取最新的稳定版本的主分支，如：main，并切换到该分支</li>\n</ol>\n<pre><code>git fetch origin main\ngit checkout -b main origin/main\n</code></pre>\n<ol start=\"2\">\n<li>获取测试完毕分支，如：release/wms/20200530，合并测试完毕分支到主分支，并推送到远程仓库</li>\n</ol>\n<pre><code>(main)\ngit fetch origin release/wms/20200530\ngit merge origin/release/wms/20200530\ngit push origin main\n</code></pre>\n<ol start=\"3\">\n<li>打 tag，并推送到远程</li>\n</ol>\n<pre><code>(main)\ngit tag -a v2.1.0 -m\"2022/5/30发布版本\"\ngit push origin v2.1.0\n</code></pre>\n<h4>基于主分支的 hotfix</h4>\n<ol>\n<li>获取最新的稳定版本的主分支，如：main，并切换到该分支</li>\n</ol>\n<pre><code>git fetch origin main\ngit checkout -b main origin/main\n</code></pre>\n<ol start=\"2\">\n<li>新建基于 main 的 hotfix 分支，如：hotfix/20200530，并且切换到该分支</li>\n</ol>\n<pre><code>(main)\ngit checkout -b hotfix/20200530\n</code></pre>\n<ol start=\"3\">\n<li>修复完毕，推送到远程提测分支</li>\n</ol>\n<pre><code>(hotfix/20200530)\ngit push origin hotfix/20200530\n</code></pre>\n<ol start=\"4\">\n<li>测试完毕，基于 main 做 rebase</li>\n</ol>\n<pre><code>git fetch origin main\ngit rebase origin/main hotfix/20200530\n</code></pre>\n<ol start=\"5\">\n<li>切到主分支，合并 hotfix 分支，并推送到远程</li>\n</ol>\n<pre><code>git checkout main\n(main)\ngit pull origin main\ngit merge hotfix/20200530\ngit push origin main\n</code></pre>\n<ol start=\"6\">\n<li>打 tag，并推送到远程</li>\n</ol>\n<pre><code>(main)\ngit tag -a v2.1.1 -m\"修复XXX功能\"\ngit push origin v2.1.1\n</code></pre>\n<h4>基于特定版本的 hotfix</h4>\n<ol>\n<li>获取远程 tag</li>\n</ol>\n<pre><code>git fetch origin --tags\n</code></pre>\n<ol start=\"2\">\n<li>基于特定版本迁出 hotfix 分支，如：hotfix/0531</li>\n</ol>\n<pre><code>git checkout -b hotfix/0531 v2.1.0\n</code></pre>\n<ol start=\"3\">\n<li>修复完毕，推送到远程提测分支</li>\n</ol>\n<pre><code>git push origin hotfix/0531\n</code></pre>\n<ol start=\"4\">\n<li>测试完毕，打 tag，并推送到远程</li>\n</ol>\n<pre><code>(hotfix/0531)\ngit tag -a v2.1.2 -m\"修复XXX功能\"\ngit push origin v2.1.1\n</code></pre>\n<ol start=\"5\">\n<li>如需要将该功能提交到 main 分支</li>\n</ol>\n<pre><code>git checkout main\ngit pull origin main\ngit cherry-pick #commitid\ngit push origin main\n</code></pre>","frontmatter":{"title":"应用研发二部git操作规范"}}},"pageContext":{"slug":"/git-flow/"}},"staticQueryHashes":["3159585216"]}